import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { useDropzone } from "react-dropzone";
import { use, useEffect, useState } from "react";
import { initDB } from "./helper/init-db";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const { acceptedFiles, getRootProps, getInputProps } = useDropzone();
  const [db, setDb] = useState<IDBDatabase | undefined>(undefined);
  const [pictures, setPictures] =
    useState<{ file: File; fileName: string }[]>();

  useEffect(() => {
    initDB().then(setDb).catch(console.error);
  }, []);

  useEffect(() => {
    if (!db) return;

    const tx = db.transaction(["picture"], "readonly");
    const store = tx.objectStore("picture");

    const request = store.getAll();
    request.onsuccess = (event) => {
      setPictures((event.target as IDBRequest).result);
    };
    request.onerror = (event) => {
      console.error("Error getting files from database", event);
    };
  }, [db]);

  useEffect(() => {
    if (!db || !acceptedFiles?.length) return;
    acceptedFiles.forEach(async (file) => {
      const tx = db.transaction(["picture"], "readwrite");
      const store = tx.objectStore("picture");

      const request = store.add({ file: file }, file.name);
      request.onsuccess = (event) => {
        console.log("Added to database", event);
      };
      request.onerror = (event) => {
        console.error("Error adding file to database", event);
      };
    });
  }, [db, acceptedFiles]);

  return (
    <>
      <Head>
        <title>POC Browser Database</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <h1 className={styles.title}>POC Browser Database</h1>
        <p>
          This is a proof of concept for a browser database. It uses the
          browser&apos;s IndexedDB API to store files and metadata.
        </p>
        <div
          {...getRootProps({ className: "dropzone" })}
          className={styles.dropzone}
        >
          <input {...getInputProps()} />
          <p>Drag & drop some files here, or click to select files</p>
        </div>

        <div className={styles.gallery}>
          {pictures?.map((picture) => (
            <img
              key={picture.fileName}
              src={URL.createObjectURL(picture.file)}
            />
          ))}
        </div>
      </main>
    </>
  );
}
